service: serverless-todo-app
frameworkVersion: '2'
custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true


plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function


provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ca-central-1'}
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
    TODOS_TABLE: Todos-${self:provider.stage} # we will get Todos-dev. Serverless will go to the provider section, then get the stage value
  apiGateway: 
    minimumCompressionSize: 1024


functions:
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
    iamRoleStatements: #Lambda Minimal Privileges
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
  

resources:
  Resources:
    TodosDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: todoId
            AttributeType: S
        KeySchema:
          - AttributeName: todoId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE} # we will get Todos-dev. Serverless will go to the provider section, then get the evnvironmrnt object, then get the value for the TODOS_TABLE

